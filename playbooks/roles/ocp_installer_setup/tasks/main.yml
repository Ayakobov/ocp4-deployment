---
- name: Ensure the default httpd address is ipv4
  lineinfile:
    path: /etc/httpd/conf/httpd.conf
    regexp: '^Listen '
    insertafter: '^#Listen '
    line: Listen 0.0.0.0:80

- name: start httpd server
  become: true
  service:
    name: httpd
    state: restarted

- name: Open port 80 for http access
  become: true
  firewalld:
    service: http
    permanent: true
    state: enabled

- name: Restart the firewalld service to load in the firewall changes
  become: true
  service: 
    name: firewalld 
    state: restarted

- name: pyvmomi install
  become: true
  pip:
    name: pyvmomi

- name: Set UTC Timezone for helper server
  shell: "timedatectl set-timezone UTC"

- name: fetch installer and client-Connected
  get_url:
    url: "{{ ocp_web }}/{{ ocp_version }}/{{ item }}"
    dest: "/var/tmp/{{ item }}"
    remote_src: yes
  when: yumrepo_url is undefined
  with_items:
    - openshift-install-linux-{{ ocp_version }}.tar.gz
    - openshift-client-linux-{{ ocp_version }}.tar.gz

- name: fetch installer and client - Disconnected
  get_url:
    url: "{{ yumrepo_url }}/{{ item }}"
    dest: "/var/tmp/{{ item }}"
    remote_src: yes
  when: yumrepo_url is defined
  with_items:
    - openshift-install-linux-{{ ocp_version }}.tar.gz
    - openshift-client-linux-{{ ocp_version }}.tar.gz

- name: extract installer and client
  become: true
  unarchive:
    src: "{{ item }}"
    dest: /usr/local/bin
    mode: +x
    remote_src: yes
  with_items:
    - "/var/tmp/openshift-install-linux-{{ ocp_version }}.tar.gz"
    - "/var/tmp/openshift-client-linux-{{ ocp_version }}.tar.gz"

- name: create installation directory
  file:
    path: "{{ install_dir }}"
    state: directory
    mode: 0644

- name: adding oc completion to bash-completion
  shell: "oc completion bash > /etc/bash_completion.d/oc_completion"

- name: Add a line to resolv.conf file
  lineinfile:
    path: /etc/resolv.conf
    regexp: "'^search'"
    insertbefore: '^nameserver'
    firstmatch: yes
    line: "search {{ searchdomain }}"

- name: Copy Tower SSH Key pairs to Installer
  template:
    src: "{{ item }}"
    dest: /root/.ssh/
    mode: 0600
  with_items:
    - "id_rsa"
    - "id_rsa.pub"

#- name: Check .ssh dir
#  file:
#    path: /home/{{ ssh_keygen_user }}/.ssh
#    state: directory
#    mode: 0700
#    owner: "{{ ssh_keygen_user }}"
#    group: "{{ ssh_keygen_user }}"
#
#- name: Create keys
#  shell: ssh-keygen -t {{ item }} -b {{ ssh_keygen_bits }} -C "{{ ssh_keygen_email }}" -N "{{ ssh_keygen_password }}" -f /home/{{ ansible_ssh_user }}/.ssh/id_{{ item }} creates=/home/{{ ssh_keygen_user }}/.ssh/id_{{ item }}
#  with_items:
#    - "{{ ssh_keygen_types }}"
#
#- name: check private keys cert privileges
#  file:
#    path: /home/{{ ssh_keygen_user }}/.ssh/id_{{ item }}
#    state: file
#    mode: 0700
#    owner: "{{ ssh_keygen_user }}"
#    group: "{{ ssh_keygen_user }}"
#  with_items:
#    - "{{ ssh_keygen_types }}"
#
#- name: check public keys cert privileges
#  file:
#    path: /home/{{ ssh_keygen_user }}/.ssh/id_{{ item }}.pub
#    state: file
#    mode: 0700
#    owner: "{{ ssh_keygen_user }}"
#    group: "{{ ssh_keygen_user }}"
#  with_items:
#    - "{{ ssh_keygen_types }}"
#
#- name: Fetch the content of ssh-pub-key
#  fetch:
#    src: /root/.ssh/id_rsa.pub
#    dest: "{{ role_path }}/templates/"

- name: copy config file to correct place-connected
  template:
    src: templates/install-config.connected.yaml.j2
    dest: "{{ install_dir }}/install-config.yaml"
    mode: 0644
  when: yumrepo_url is undefined

- name: copy config file to referrence place-connected
  template:
    src: templates/install-config.connected.yaml.j2
    dest: /var/tmp/install-config.yaml
    mode: 0644
  when: yumrepo_url is undefined

- name: copy config file to correct place- disconnected
  template:
    src: templates/install-config.disconnected.yaml.j2
    dest: "{{ install_dir }}/install-config.yaml"
    mode: 0644
  when: yumrepo_url is defined

- name: copy config file to correct place- disconnected
  template:
    src: templates/install-config.disconnected.yaml.j2
    dest: /var/tmp/install-config.yaml
    mode: 0644
  when: yumrepo_url is defined

- name: generate the Kubernetes manifests for the cluster
  shell: "/usr/local/bin/openshift-install create manifests --dir={{ install_dir }}"

- pause: seconds=30

- name: prevent Pods from being scheduled on the control plane machines
  replace:
    path: "{{ install_dir }}/manifests/cluster-scheduler-02-config.yml"
    before: 'policy'
    regexp: 'true'
    replace: 'false'
    backup: yes

- pause: seconds=30

- name: create ignition configs
  shell: "/usr/local/bin/openshift-install create ignition-configs --dir={{ install_dir }}"
  
- name: create append-bootstrap file
  template:
    src: templates/append-bootstrap.ign.j2
    dest: "{{ install_dir }}/append-bootstrap.ign"

- name: create base64 files from required ignition files
  shell:
    cmd: |
      base64 -w0 "{{ install_dir }}/master.ign" > "{{ install_dir }}/master.64"
      base64 -w0 "{{ install_dir }}/worker.ign" > "{{ install_dir }}/worker.64"
      base64 -w0 "{{ install_dir }}/append-bootstrap.ign" > "{{ install_dir }}/append-bootstrap.64"

- name: Start the ssh-agent process as a background task
  shell:
    cmd: |
      eval "$(ssh-agent -s)" && ssh-add /root/.ssh/id_rsa

- name: copy bootstrap ignition file to public dir
  become: true
  copy:
    src: "{{ install_dir }}/bootstrap.ign"
    dest: /var/www/html/bootstrap.ign
    remote_src: yes

- name: Fetch the content of append-bootstrap.64
  fetch:
    src: "{{ install_dir }}/append-bootstrap.64"
    dest: "{{ role_path }}"

- name: Fetch the content of master.64
  fetch:
    src: "{{ install_dir }}/master.64"
    dest: "{{ role_path }}"

- name: Fetch the content of worker.64
  fetch:
    src: "{{ install_dir }}/worker.64"
    dest: "{{ role_path }}"
